#!/bin/bash

available_packages=("openjdk" "php" "node")

getVersions() {
    local package_name="$1"
    brew ls --versions | grep "^${package_name}[ @]" | sed 's/ .*//'
}

availablePackages() {
    echo "Available packages:"
    output=""
    for package in "${available_packages[@]}"; do
        line="$(brew ls --versions | grep "^${package}[ @]" | sed 's/[[:space:]]/\t/g' | sed 's/^/  /')"
        output+="${line}\n"
    done
    echo -e "$output" | column -t -s $'\t'
}

help() {
    echo "Usage: $(basename "$0") [options] [command]"
    echo ""
    echo "Brew package version switcher"
    echo ""
    echo "By default, shows what would be done and asks for confirmation."
    echo ""
    echo "Options:"
    echo "  -f, --force     execute without confirmation"
    echo ""
    echo "Available command:"
    echo "  list        list available packages and versions"
    echo "  <package>   switch package to given version"
    echo "              <package>[@<version>]"
    echo "              Example:"
    echo "              php     switching to latest available php version"
    echo "              php@8.3 switching to php 8.3"
    echo ""
}

FORCE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--force)
            FORCE=true
            shift
            ;;
        -h|--help)
            help
            exit 0
            ;;
        list)
            availablePackages
            exit 0
            ;;
        *)
            break
            ;;
    esac
done

if [[ $# -ne 1 ]]; then
  help
  exit 2
fi

PACKAGE_NAME="${1//@*}"
VERSION="$1"

# This is to prevent unlinking and linking packages that are not managed by this script
found=false
for pkg in "${available_packages[@]}"; do
  if [[ "$pkg" == "$PACKAGE_NAME" ]]; then
    found=true
    break
  fi
done

if ! $found; then
  echo "$PACKAGE_NAME is not in the list."
  exit 1
fi

if ! brew list "$VERSION" &>/dev/null; then
    echo "${VERSION} is not installed."
    exit 1
fi

if [[ "$FORCE" == "false" ]]; then
    echo "Unlink all versions:"
    for version in $(getVersions "$PACKAGE_NAME");do
        echo "Would unlink: $version"
    done
    echo "Would link: $VERSION"
    echo ""

    read -p "Do you want to proceed with these changes? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Operation cancelled."
        exit 0
    fi

    echo "Executing changes..."
fi

for version in $(getVersions "$PACKAGE_NAME");do
    brew unlink "$version"
done
brew link "$VERSION"
