#!/bin/bash

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly RESET='\033[0m'
readonly BOLD='\033[1m'

# Script metadata
readonly SCRIPT_NAME="dot"
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly DOTFILES_DIR
readonly INSTALL_DIR="${DOTFILES_DIR}/install"

# Helper functions
print_header() {
    echo -e "\n${BOLD}${BLUE}==>${RESET} ${BOLD}$1${RESET}\n"
}

print_success() {
    echo -e "${GREEN}âœ“${RESET} $1"
}

print_error() {
    echo -e "${RED}âœ—${RESET} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}âš ${RESET} $1"
}

print_info() {
    echo -e "${CYAN}$1${RESET}"
}

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

install_homebrew() {
    if command_exists brew; then
        print_success "Homebrew is already installed"
        return 0
    fi

    print_header "Installing Homebrew"
    print_info "This will install Homebrew package manager..."

    if /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then
        print_success "Homebrew installed successfully"

        # Add brew to PATH for current session
        if [[ $(uname -m) == 'arm64' ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        else
            eval "$(/usr/local/bin/brew shellenv)"
        fi
        print_info "Added Homebrew to PATH for this session"
    else
        print_error "Failed to install Homebrew"
        return 1
    fi
}

install_packages() {
    if ! command_exists brew; then
        print_error "Homebrew is not installed"
        print_info "Run 'dot init' to install Homebrew first"
        return 1
    fi

    if [[ ! -f "${INSTALL_DIR}/Brewfile" ]]; then
        print_warning "No Brewfile found at ${INSTALL_DIR}/Brewfile"
        print_info "Create a Brewfile to manage packages with 'brew bundle dump'"
        return 1
    fi

    print_header "Checking packages from Brewfile"
    print_info "Using Brewfile at ${INSTALL_DIR}/Brewfile"

    if brew bundle check --file="${INSTALL_DIR}/Brewfile"; then
        print_success "All packages are already installed"
    else
        print_header "Installing missing packages from Brewfile"
        if brew bundle --file="${INSTALL_DIR}/Brewfile"; then
            print_success "Packages installed from Brewfile"
        else
            print_error "Failed to install packages from Brewfile"
            return 1
        fi
    fi
}

# Init command
cmd_init() {
    print_header "Initializing dotfiles setup"

    install_homebrew || return 1
    install_packages || return 1

    print_success "Dotfiles initialization complete! ðŸŽ‰"
}

# Stow command
cmd_stow() {
    print_header "Stowing dotfiles"

    if ! command_exists stow; then
        print_error "GNU Stow is not installed"
        print_info "Install it first: brew install stow"
        return 1
    fi

    print_info "Creating symlinks for dotfiles..."

    if stow -R -v -d "${DOTFILES_DIR}" -t "${HOME}" home; then
        print_success "Dotfiles stowed successfully"
        print_info "Configuration files are now symlinked to your home directory"
    else
        print_error "Failed to stow dotfiles"
        print_info "Check for conflicting files in your home directory"
        return 1
    fi
}

# Package command
cmd_package() {
    local subcmd="${1:-help}"
    shift || true

    case "$subcmd" in
        add)
            package_add "$@"
            ;;
        clean)
            package_clean "$@"
            ;;
        help|*)
            echo "Usage: dot package [SUBCOMMAND]"
            echo ""
            echo "Package management subcommands:"
            echo "  add         Add packages to Brewfile and install them"
            echo "  clean       Remove unused packages and cleanup Homebrew"
            echo ""
            echo "Examples:"
            echo "  dot package add git vim    Add packages to Brewfile and install"
            echo "  dot package clean          Clean up unused packages"
            ;;
    esac
}

package_add() {
    if ! command_exists brew; then
        print_error "Homebrew is not installed"
        return 1
    fi

    if [[ $# -eq 0 ]]; then
        print_error "No packages specified"
        print_info "Usage: dot package add <package1> [package2] ..."
        return 1
    fi

    print_header "Adding packages to Brewfile"
    print_info "Adding packages: $*"

    if brew bundle add --file="${INSTALL_DIR}/Brewfile" "$@"; then
        print_success "Packages added to Brewfile and installed"
    else
        print_error "Failed to add packages"
        return 1
    fi
}

package_clean() {
    if ! command_exists brew; then
        print_error "Homebrew is not installed"
        return 1
    fi

    if [[ ! -f "${INSTALL_DIR}/Brewfile" ]]; then
        print_warning "No Brewfile found at ${INSTALL_DIR}/Brewfile"
        print_info "Create a Brewfile to manage packages with 'brew bundle dump'"
        return 1
    fi

    print_header "Cleaning up packages"
    
    print_info "Removing packages not listed in Brewfile..."
    if brew bundle cleanup --file="${INSTALL_DIR}/Brewfile"; then
        print_success "Cleaned up packages not in Brewfile"
    else
        print_warning "Failed to cleanup packages"
    fi

    print_info "Cleaning up Homebrew cache..."
    if brew cleanup; then
        print_success "Cleaned up Homebrew cache"
    else
        print_warning "Failed to clean up cache"
    fi
}

# Help command
cmd_help() {
    echo "Usage: dot [OPTIONS] [COMMAND]"
    echo ""
    echo "Dotfiles management script"
    echo ""
    echo "Commands:"
    echo "  help        Show this help message"
    echo "  init        Initialize dotfiles setup (install Homebrew, packages, and stow)"
    echo "  package     Package management commands"
    echo "  stow        Manage dotfiles with GNU stow"
    echo ""
    echo "Options:"
    echo "  -h, --help  Show this help message"
    echo ""
    echo "Examples:"
    echo "  dot help    Display help information"
    echo "  dot -h      Display help information"
    echo "  dot stow    Manage dotfiles with stow"
}

# Main function
main() {
    # Parse global options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                cmd_help
                exit 0
                ;;
            *)
                break
                ;;
        esac
    done

    # Get command
    local cmd="${1:-help}"
    shift || true

    # Execute command
    case "$cmd" in
        help)
            cmd_help
            ;;
        init)
            cmd_init "$@"
            ;;
        package)
            cmd_package "$@"
            ;;
        stow)
            cmd_stow "$@"
            ;;
        *)
            print_error "Unknown command: $cmd"
            echo "Run '${SCRIPT_NAME} help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
