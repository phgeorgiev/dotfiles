#!/bin/bash

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly RESET='\033[0m'
readonly BOLD='\033[1m'

# Script metadata
readonly SCRIPT_NAME="dot"
# Resolve symlinks to get the actual script location
SCRIPT_PATH="${BASH_SOURCE[0]}"
while [[ -L "$SCRIPT_PATH" ]]; do
    SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
done
DOTFILES_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
readonly DOTFILES_DIR
readonly INSTALL_DIR="${DOTFILES_DIR}/install"

# Configurations
readonly LINKABLE_PACKAGES=("openjdk" "php" "node")

# Helper functions
print_header() {
    echo -e "\n${BOLD}${BLUE}==>${RESET} ${BOLD}$1${RESET}\n"
}

print_success() {
    echo -e "${GREEN}âœ“${RESET} $1"
}

print_error() {
    echo -e "${RED}âœ—${RESET} $1" >&2
}

print_warning() {
    echo -e "${YELLOW}âš ${RESET} $1"
}

print_info() {
    echo -e "${CYAN}$1${RESET}"
}

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

ask_confirmation() {
    local default="${1:-N}"
    local message="Do you want to proceed with these changes?"

    if [[ "$default" =~ ^[Yy]$ ]]; then
        local prompt="(Y/n)"
        local default_regex="^[Nn]$"
    else
        local prompt="(y/N)"
        local default_regex="^[Yy]$"
    fi

    read -p "$message $prompt: " -n 1 -r
    echo ""

    # If no input (just Enter), use default
    if [[ -z "$REPLY" ]]; then
        if [[ "$default" =~ ^[Yy]$ ]]; then
            return 0
        else
            print_warning "Operation cancelled"
            return 1
        fi
    fi

    # Check user input
    if [[ "$REPLY" =~ $default_regex ]]; then
        return 0
    else
        print_warning "Operation cancelled"
        return 1
    fi
}

install_homebrew() {
    if command_exists brew; then
        print_success "Homebrew is already installed"
        return 0
    fi

    print_header "Installing Homebrew"
    print_info "This will install Homebrew package manager..."

    if /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then
        print_success "Homebrew installed successfully"

        # Add brew to PATH for current session
        if [[ $(uname -m) == 'arm64' ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        else
            eval "$(/usr/local/bin/brew shellenv)"
        fi
        print_info "Added Homebrew to PATH for this session"
    else
        print_error "Failed to install Homebrew"
        return 1
    fi
}

install_zsh() {
    if command_exists zsh; then
        print_success "Zsh is already installed"
    else
        print_error "Zsh is not installed"
        print_info "Please install Zsh first: brew install zsh"
        return 1
    fi

    # Set zsh as default shell if not already
    local current_shell
    current_shell="$(dscl . -read /Users/"$USER" UserShell | cut -d: -f2 | xargs)"
    local zsh_path
    zsh_path="$(which zsh)"

    if [[ "$current_shell" != "$zsh_path" ]]; then
        print_info "Setting Zsh as default shell..."
        if sudo chsh -s "$zsh_path" "$USER"; then
            print_success "Zsh set as default shell"
            print_info "Restart your terminal to use Zsh"
        else
            print_warning "Failed to set Zsh as default shell"
            print_info "You can change it manually with: chsh -s $(which zsh)"
        fi
    else
        print_success "Zsh is already the default shell"
    fi

    # Install powerlevel10k theme
    local p10k_dir="${HOME}/.oh-my-zsh/custom/themes/powerlevel10k"

    if [[ -d "$p10k_dir" ]]; then
        print_success "Powerlevel10k is already installed"
    else
        print_header "Installing Powerlevel10k theme"
        print_info "This will install the Powerlevel10k Zsh theme..."

        # Clone powerlevel10k
        if git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$p10k_dir"; then
            print_success "Powerlevel10k installed successfully"
            print_info "To configure powerlevel10k, run: p10k configure"
        else
            print_error "Failed to install Powerlevel10k"
            return 1
        fi
    fi
}

install_packages() {
    if ! command_exists brew; then
        print_error "Homebrew is not installed"
        print_info "Run 'dot init' to install Homebrew first"
        return 1
    fi

    if [[ ! -f "${INSTALL_DIR}/Brewfile" ]]; then
        print_warning "No Brewfile found at ${INSTALL_DIR}/Brewfile"
        print_info "Create a Brewfile to manage packages with 'brew bundle dump'"
        return 1
    fi

    print_header "Checking packages from Brewfile"
    print_info "Using Brewfile at ${INSTALL_DIR}/Brewfile"

    if brew bundle check --file="${INSTALL_DIR}/Brewfile"; then
        print_success "All packages are already installed"
    else
        print_header "Installing missing packages from Brewfile"
        if brew bundle --file="${INSTALL_DIR}/Brewfile"; then
            print_success "Packages installed from Brewfile"
        else
            print_error "Failed to install packages from Brewfile"
            return 1
        fi
    fi
}

# Init command
cmd_init() {
    print_header "Initializing dotfiles setup"

    install_homebrew || return 1
    install_packages || return 1
    install_zsh || return 1
    cmd_stow || return 1
    cmd_link || return 1

    echo ""
    print_success "Dotfiles initialization complete! ðŸŽ‰"
}

# Stow command
cmd_stow() {
    print_header "Stowing dotfiles"

    if ! command_exists stow; then
        print_error "GNU Stow is not installed"
        print_info "Install it first: brew install stow"
        return 1
    fi

    print_info "Creating symlinks for dotfiles..."

    if stow -R -v -d "${DOTFILES_DIR}" -t "${HOME}" home; then
        print_success "Dotfiles stowed successfully"
        print_info "Configuration files are now symlinked to your home directory"
    else
        print_error "Failed to stow dotfiles"
        print_info "Check for conflicting files in your home directory"
        return 1
    fi
}

# Package command
cmd_package() {
    local subcmd="${1:-help}"
    shift || true

    case "$subcmd" in
        add)
            package_add "$@"
            ;;
        clean)
            package_clean "$@"
            ;;
        link)
            package_link "$@"
            ;;
        remove)
            package_remove "$@"
            ;;
        help|*)
            echo "Usage: dot package [SUBCOMMAND]"
            echo ""
            echo "Package management subcommands:"
            echo "  add         Add packages to Brewfile and install them"
            echo "  clean       Remove unused packages and cleanup Homebrew"
            echo "  link        Switch between package versions"
            echo "  remove      Remove packages from Brewfile and uninstall them"
            echo ""
            echo "Examples:"
            echo "  dot package add git vim       Add packages to Brewfile and install"
            echo "  dot package remove git vim    Remove packages from Brewfile and uninstall"
            echo "  dot package link node@22      Switch to node version 22"
            echo "  dot package link list         List available packages and versions"
            echo "  dot package clean             Clean up unused packages"
            ;;
    esac
}

package_add() {
    if ! command_exists brew; then
        print_error "Homebrew is not installed"
        return 1
    fi

    if [[ $# -eq 0 ]]; then
        print_error "No packages specified"
        print_info "Usage: dot package add <package1> [package2] ..."
        return 1
    fi

    print_header "Adding packages to Brewfile"
    print_info "Adding packages: $*"

    if brew bundle add --file="${INSTALL_DIR}/Brewfile" "$@"; then
        print_success "Packages added to Brewfile and installed"
    else
        print_error "Failed to add packages"
        return 1
    fi
}

package_link() {
    if ! command_exists brew; then
        print_error "Homebrew is not installed"
        return 1
    fi

    get_versions() {
        local package_name="$1"
        brew ls --versions | grep "^${package_name}[ @]" | sed 's/ .*//'
    }

    list_packages() {
        print_header "Available packages"
        local output=""
        for package in "${LINKABLE_PACKAGES[@]}"; do
            local line
            line="$(brew ls --versions | grep "^${package}[ @]" | sed 's/[[:space:]]/\t/g' | sed 's/^/  /')"
            output+="${line}\n"
        done
        echo -e "$output" | column -t -s $'\t'
    }

    if [[ $# -eq 0 ]] || [[ "$1" == "list" ]]; then
        list_packages
        return 0
    fi

    if [[ $# -ne 1 ]]; then
        print_error "Invalid arguments"
        print_info "Usage: dot package link <package>[@<version>] or dot package link list"
        return 1
    fi

    local package_name="${1//@*}"
    local version="$1"

    # Check if package is in allowed list
    local found=false
    for pkg in "${LINKABLE_PACKAGES[@]}"; do
        if [[ "$pkg" == "$package_name" ]]; then
            found=true
            break
        fi
    done

    if ! $found; then
        print_error "$package_name is not in the managed packages list"
        print_info "Available packages: ${LINKABLE_PACKAGES[*]}"
        return 1
    fi

    if ! brew list "$version" &>/dev/null; then
        print_error "${version} is not installed"
        print_info "Install it first with: brew install $version"
        return 1
    fi

    print_header "Switching package version"
    print_info "Package: $package_name -> $version"
    echo ""

    print_info "Versions to unlink:"
    for v in $(get_versions "$package_name"); do
        echo "  - $v"
    done
    print_info "Version to link: $version"
    echo ""

    if ! ask_confirmation "y"; then
        return 0
    fi

    print_info "Executing changes..."
    for v in $(get_versions "$package_name"); do
        if brew unlink "$v" 2>/dev/null; then
            print_info "Unlinked: $v"
        fi
    done

    if brew link "$version"; then
        print_success "Successfully linked: $version"
    else
        print_error "Failed to link: $version"
        return 1
    fi
}

package_remove() {
    if ! command_exists brew; then
        print_error "Homebrew is not installed"
        return 1
    fi

    if [[ $# -eq 0 ]]; then
        print_error "No packages specified"
        print_info "Usage: dot package remove <package1> [package2] ..."
        return 1
    fi

    print_header "Removing packages from Brewfile"
    print_info "Removing packages: $*"

    if brew bundle remove --file="${INSTALL_DIR}/Brewfile" "$@"; then
        print_success "Packages removed from Brewfile and uninstalled"
    else
        print_error "Failed to remove packages"
        return 1
    fi
}

package_clean() {
    if ! command_exists brew; then
        print_error "Homebrew is not installed"
        return 1
    fi

    if [[ ! -f "${INSTALL_DIR}/Brewfile" ]]; then
        print_warning "No Brewfile found at ${INSTALL_DIR}/Brewfile"
        print_info "Create a Brewfile to manage packages with 'brew bundle dump'"
        return 1
    fi

    print_header "Cleaning up packages"

    print_info "Removing packages not listed in Brewfile..."
    if brew bundle cleanup --file="${INSTALL_DIR}/Brewfile"; then
        print_success "Cleaned up packages not in Brewfile"
    else
        print_warning "Failed to cleanup packages"
    fi

    print_info "Cleaning up Homebrew cache..."
    if brew cleanup; then
        print_success "Cleaned up Homebrew cache"
    else
        print_warning "Failed to clean up cache"
    fi
}

# Link command
cmd_link() {
    local link_path="/usr/local/bin/dot"
    local script_path="${DOTFILES_DIR}/dot"

    if [[ -L "$link_path" ]]; then
        print_success "Symlink already exists at $link_path"
        return 0
    fi

    if [[ -f "$link_path" ]]; then
        print_error "File already exists at $link_path (not a symlink)"
        print_info "Remove the existing file first or choose a different location"
        return 1
    fi

    print_header "Creating symlink for dot script"
    print_info "Linking $script_path -> $link_path"
    print_info "This requires administrator privileges"

    if sudo ln -s "$script_path" "$link_path"; then
        print_success "Symlink created successfully"
        print_info "You can now run 'dot' from anywhere"
    else
        print_error "Failed to create symlink"
        print_info "Check permissions or try running the command manually"
        return 1
    fi
}

# Help command
cmd_help() {
    echo "Usage: dot [OPTIONS] [COMMAND]"
    echo ""
    echo "Dotfiles management script"
    echo ""
    echo "Commands:"
    echo "  help        Show this help message"
    echo "  init        Initialize dotfiles setup (install Homebrew, packages, Zsh with powerlevel10k, stow, and create symlink)"
    echo "  link        Create symlink in /usr/local/bin for global access"
    echo "  package     Package management commands"
    echo "  stow        Manage dotfiles with GNU stow"
    echo ""
    echo "Options:"
    echo "  -h, --help  Show this help message"
    echo ""
    echo "Examples:"
    echo "  dot help    Display help information"
    echo "  dot -h      Display help information"
    echo "  dot stow    Manage dotfiles with stow"
}

# Main function
main() {
    # Parse global options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                cmd_help
                exit 0
                ;;
            *)
                break
                ;;
        esac
    done

    # Get command
    local cmd="${1:-help}"
    shift || true

    # Execute command
    case "$cmd" in
        help)
            cmd_help
            ;;
        init)
            cmd_init "$@"
            ;;
        link)
            cmd_link "$@"
            ;;
        package)
            cmd_package "$@"
            ;;
        stow)
            cmd_stow "$@"
            ;;
        *)
            print_error "Unknown command: $cmd"
            echo "Run '${SCRIPT_NAME} help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
